name: Ubuntu

on:
  push:
    branches: [ release ]
  pull_request:
    push:
      branches-ignore: develop
    pull_request:
      branches-ignore: develop

jobs:
  CI_Tests:
    permissions:
      actions: none
      checks: none
      contents: none
      deployments: none
      issues: none
      packages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    strategy:
      fail-fast: false
      matrix:
        cpp_version: [ 17, 20 ]
        build_type: [ Debug, Release ]
        os: [ ubuntu-20.04 ]
        toolset: [ g++-9, g++-10, clang++-8, clang++-9, clang++-10, clang++-11, clang++-12, clang++-13 ]
        exclude:
          - toolset: clang++-8
            cpp_version: 20
          - toolset: clang++-9
            cpp_version: 20
          - toolset: clang++-10
            cpp_version: 20
          - toolset: clang+=-11
            cpp_version: 20
          - toolset: g++-9
            cpp_version: 20
    runs-on: ${{ matrix.os }}
    name: "${{ matrix.os }} ${{ matrix.toolset }} ${{ matrix.cpp_version }} ${{ matrix.build_type }}"
    steps:
      - uses: actions/checkout@v1
      - name: Cache Apt packages
        uses: actions/cache@v2
        with:
          path: |
            /var/cache/apt
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pkgcache.bin') }}
      - name: Setup APT and Base Dependencies
        run: |
          sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo apt-add-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main'
          sudo apt-add-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main'
          sudo apt update
          sudo apt install ninja-build libunwind-dev
      - name: Get Clang Version
        if: startsWith( matrix.toolset, 'clang' )
        run: |
          echo "DAW_CLANG_VER=$(echo ${{matrix.toolset}} | cut -d- -f2)" >> $GITHUB_ENV
      - name: Install Clang Dependencies
        if: startsWith( matrix.toolset, 'clang' )
        run: |
          sudo apt install clang-${{ env.DAW_CLANG_VER  }} libc++-${{ env.DAW_CLANG_VER }}-dev libc++abi-${{ env.DAW_CLANG_VER }}-dev
        env:
          CC: clang-${{ env.DAW_CLANG_VER }}
          CXX: clang++-${{ env.DAW_CLANG_VER }}
          CXXFLAGS: --stdlib=libc++
      - name: Get GCC version
        if: startsWith( matrix.toolset, 'g++' )
        run: |
          echo "DAW_GCC_VER=$(echo ${{matrix.toolset}} | cut -d- -f2)" >> $GITHUB_ENV
      - name: Install GCC Dependencies
        if: startsWith( matrix.toolset, 'g++' )
        run: |
          sudo apt install gcc-${{ env.DAW_GCC_VER }} g++-${{ env.DAW_GCC_VER }}
        env:
          CC: gcc-${{ env.DAW_CLANG_VER }}
          CXX: g++-${{ env.DAW_CLANG_VER }}
      - name: Create Build
        run: |
          mkdir build
      - name: Build Dependencies
        env:
          CXX: ${{ matrix.toolset }}
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DDAW_NUM_RUNS=1 -DDAW_ENABLE_TESTING=ON -DDAW_WERROR=ON -DDAW_ALLOW_SSE42=ON -DDAW_JSON_USE_SANITIZERS=ON -DDAW_NO_FLATTEN=ON -DCMAKE_CXX_STANDARD=${{ matrix.cpp_version }} -Bbuild/ .
      - name: Build
        run: cmake --build build/ --target full -- -k
      - name: Test
        run: ctest -C ${{ matrix.build_type }} -j2 -VV --timeout 1200 --test-dir build/