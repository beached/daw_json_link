cmake_minimum_required(VERSION 3.14)

project(daw_json_linkTests LANGUAGES CXX)

include(../cmake/project-is-top-level.cmake)

if(PROJECT_IS_TOP_LEVEL)
  find_package(daw_json_link REQUIRED)
  enable_testing()
endif()

find_package(Boost 1.72 REQUIRED container)
find_package(nanobench REQUIRED)
find_package(fmt REQUIRED)

include_directories(include)
link_libraries(daw::json_link)

set(DAW_NUM_RUNS "" CACHE STRING "Change the number of runs of some tests")
if(NOT DAW_NUM_RUNS STREQUAL "")
  add_compile_definitions("DAW_NUM_RUNS=${DAW_NUM_RUNS}")
endif()

option(DAW_JSON_NO_CONST_EXPR "Ensure guaranteed copy elision in array/class \
types" OFF)
if(DAW_JSON_NO_CONST_EXPR)
  add_compile_definitions(DAW_JSON_NO_CONST_EXPR)
endif()

foreach(a IN ITEMS apache_builds citm geojson twitter twitter2)
  foreach(b IN ITEMS cx rn si)
    foreach(c IN ITEMS ch unch)
      set(name "${a}_parser_${b}_${c}")
      add_library("${name}" OBJECT "src/${name}.cpp")
      link_libraries("${name}")
    endforeach()
  endforeach()
endforeach()

set(cwd "")
set(args "")

function(test name)
  cmake_parse_arguments(PARSE_ARGV 1 test "EXCLUDE_FROM_ALL;BUILD_ONLY" "" "")
  set(exclude "")
  if(test_EXCLUDE_FROM_ALL)
    set(exclude EXCLUDE_FROM_ALL)
  endif()
  add_executable("${name}" ${exclude} "src/${name}.cpp")
  if(NOT test_BUILD_ONLY)
    string(REGEX REPLACE "(.+)" "WORKING_DIRECTORY;\\1" cwd "${cwd}")
    string(REGEX REPLACE "_test$" "" clean_name "${name}")
    string(REPLACE "\${clean_name}" "${clean_name}" args "${args}")
    string(REPLACE "\${name}" "${name}" args "${args}")
    add_test(NAME "${name}" COMMAND "${name}" ${args} ${cwd})
    if(test_EXCLUDE_FROM_ALL)
      set_property(TEST "${name}" PROPERTY LABELS excluded)
    endif()
  endif()
endfunction()

test(canada_test_alloc BUILD_ONLY)
test(citm_test_alloc BUILD_ONLY EXCLUDE_FROM_ALL)
test(city_test BUILD_ONLY)
test(cookbook_unknown_types_and_raw_parsing3_test)
test(coords_test BUILD_ONLY)
test(coords_test2 BUILD_ONLY)
test(daw_json_iostream_test)
test(daw_json_link_test)
test(daw_json_minify BUILD_ONLY)
test(daw_json_minify_full BUILD_ONLY)
test(daw_json_roundtrip BUILD_ONLY)
test(daw_murmur3_test)
test(float_array_basic_test)
test(float_array_test)
test(int_array_basic_test)
test(int_array_test)
test(int_sanity_test)
test(kv_map_test)
test(make_full24 BUILD_ONLY)
test(nativejson_bench BUILD_ONLY)
test(nativejson_bench_alloc BUILD_ONLY EXCLUDE_FROM_ALL)
test(nativejson_bench_nanobench BUILD_ONLY)
test(no_move_or_copy_cls_test)
test(should_fail_001)
test(simple_test BUILD_ONLY)
test(stream_output_test)
test(test_array_of_ordered BUILD_ONLY)
test(test_dawjsonlink EXCLUDE_FROM_ALL)
test(test_details_parse_options BUILD_ONLY)
test(test_details_parse_real)
test(test_details_parse_value_array)
test(test_details_parse_value_class)
test(test_details_parse_value_custom)
test(test_details_parse_value_null)
test(test_details_parse_value_real)
test(test_details_parse_value_signed)
test(test_details_parse_value_unsigned)
test(test_details_skip_array)
test(test_details_skip_class)
test(test_details_skip_number)
test(test_details_skip_string)
test(trailing_commas)
test(twitter_test_alloc BUILD_ONLY)
test(twitter_test_pmr BUILD_ONLY)

target_link_libraries(twitter_test_pmr PRIVATE Boost::headers Boost::container)
target_link_libraries(float_array_basic_test PRIVATE nanobench::nanobench)
target_link_libraries(
    nativejson_bench_nanobench PRIVATE
    fmt::fmt nanobench::nanobench
)

if(NOT MSVC)
  test(kostya_bench BUILD_ONLY)
  test(kostya_bench2 BUILD_ONLY)
  test(kostya_bench3 BUILD_ONLY)
endif()

set(cwd "${PROJECT_SOURCE_DIR}/../test_data")
test(cookbook_class_alternate1_test)
test(daw_json_schema_test)
test(int_ptr_test)
test(json_member_test)

set(args twitter.json citm_catalog.json canada.json)
test(nativejson_bench_basic)
test(nativejson_bench_basic2)
test(nativejson_bench2)
test(nativejson_roundtrip)

set(args citm_catalog.json)
test(citm_test)
test(citm_test_basic)

set(args twitter.json)
test(twitter_test)
test(twitter_test2)
test(twitter_test_basic)
test(twitter_test_basic2)

set(args canada.json)
test(canada_test)
test(canada_test_basic)

set(args "\${clean_name}.json")
test(apache_builds_cpp_comments_test)
test(apache_builds_hash_comments_test)
test(apache_builds_test)
test(cookbook_array1_test)
test(cookbook_array2_test)
test(cookbook_array3_test)
test(cookbook_class_from_array1_test)
test(cookbook_class_from_array2_test)
test(cookbook_class_from_json_mapping1_test)
test(cookbook_class1_test)
test(cookbook_class2_test)
test(cookbook_class3_test)
test(cookbook_dates1_test)
test(cookbook_dates2_test)
test(cookbook_dates3_test)
test(cookbook_dates4_test)
test(cookbook_enums1_test EXCLUDE_FROM_ALL)
test(cookbook_enums2_test)
test(cookbook_escaped_strings1_test)
test(cookbook_graphs1_test)
test(cookbook_inserting_extracting_raw_json1_test)
test(cookbook_kv1_test)
test(cookbook_kv2_test)
test(cookbook_kv3_test)
test(cookbook_kv4_test)
test(cookbook_numbers1_test)
test(cookbook_numbers2_test)
test(cookbook_numbers3_test)
test(cookbook_optional_values1_test)
test(cookbook_parsing_individual_members1_test)
test(cookbook_parsing_individual_members2_test)
test(cookbook_parsing_individual_members3_test)
test(cookbook_tuple1_test)
test(cookbook_unknown_types_and_raw_parsing1_test)
test(cookbook_unknown_types_and_raw_parsing2_test)
test(cookbook_variant1_test)
test(cookbook_variant2_test)
test(cookbook_variant3_test)
test(cookbook_variant4_test)
test(cookbook_variant5_test)
test(numbers_test)
test(optional_tagged_variant_test)
test(optional_variant_test)
test(strings_escaped_test)
test(strings_test)
test(twitter_timeline_test)

target_link_libraries(cookbook_numbers3_test PRIVATE Boost::headers)

set(args gsoc-2018.json)
test(gsoc_test)

set(args full_unicode.json full_unicode_escaped.json)
test(full_unicode_roundtrip_test)

set(args "\${name}.json")
test(small_test)
test(test_stateful_json_value)

set(args utf16_test.json)
test(utf16_string_test)

find_package(Git REQUIRED)
execute_process(
    COMMAND "${GIT_EXECUTABLE}" rev-parse --short HEAD
    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/.."
    RESULT_VARIABLE result
    OUTPUT_VARIABLE revision
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
if(NOT result EQUAL "0")
  message(FATAL_ERROR "Git failed with ${result}")
endif()

set(cwd "")
set(args "")
test(json_benchmark BUILD_ONLY)

set(vars PROCESSOR_DESCRIPTION OS_NAME OS_RELEASE OS_VERSION OS_PLATFORM)
foreach(var IN LISTS vars)
  cmake_host_system_information(RESULT val QUERY "${var}")
  string(REPLACE "#" "" val "${val}")
  target_compile_definitions(json_benchmark PRIVATE "${var}=\"${val}\"")
endforeach()
target_compile_definitions(
    json_benchmark PRIVATE
    "BUILD_TYPE=\"$<CONFIG>\""
    "SOURCE_CONTROL_REVISION=\"${revision}\""
)
